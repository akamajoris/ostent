// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x3c\x79\x73\xdb\xb8\xf5\xff\xef\xa7\xc0\xf2\xf7\x4b\x67\x77\xbb\x24\x63\xc7\x6e\x33\x59\x49\x9d\xc4\x56\x77\x35\xb5\x1d\x4d\x6c\xa7\xdd\x71\x35\x19\x48\x84\x24\x24\x14\xc9\x05\x40\x1f\xfd\xf4\x7d\x00\x78\x80\x12\x75\x51\x24\xe3\xce\x24\x33\xb1\x44\x00\xef\x06\xde\x45\x8a\x77\x77\x1e\x99\xd2\x80\x20\x4b\x7f\x7e\x8a\x23\x41\x17\xc4\x1a\x8d\x3a\x3c\xc2\x41\xef\xee\xce\x39\xc7\x02\x3b\xfc\x89\x0b\xb2\xf8\x14\xc2\xdf\x40\x38\x7a\xd1\xa7\x69\xc8\x16\x58\xc0\x52\x37\x59\x4b\x02\x6f\x34\x5a\x41\x39\x07\xa8\x00\x6b\xa4\x18\xcd\x19\x99\x76\x2d\xd7\x42\x82\x0a\x9f\x74\xad\x74\x16\x95\x93\x4a\xa7\x3f\xf1\x79\xc8\x80\x96\xb5\x86\xa5\xe5\x75\x1d\x17\xaf\x65\xc8\xc7\xc0\xca\x77\x1d\x8f\xde\xa3\x89\x8f\x39\xef\x5a\x2c\x7c\x40\xe4\x11\x84\xf0\x88\x07\x1c\xda\xe3\x50\x88\x70\x61\xf5\xbe\x43\xc8\x5c\x36\x09\xfd\x78\x11\x20\xbe\xc0\xbe\x6f\x1f\x21\x41\x1e\x85\xcd\xe8\x6c\x2e\xac\x9e\xb9\xec\xee\x8e\x4e\x91\x66\x32\xc2\x0c\x2f\xb8\x73\x81\x03\xe7\x8a\xcc\xb0\xa0\xf7\x64\x34\x02\x16\x1f\x6c\xf9\x67\x4e\x3d\x02\x4c\xfa\x1c\x06\xe5\x77\x73\x50\x72\xae\x18\x00\x16\xe6\x47\x29\xea\xf9\xa9\xa6\x1a\xde\x13\x36\xf5\xc3\x07\x20\x8c\x53\x4d\x5e\x84\xd8\x43\xf8\x7e\x86\x3c\xca\x23\x1f\x3f\xa1\x10\xcc\x14\x06\xdc\xd2\x3a\x4f\xf5\x96\xb0\x74\xe3\xd3\xe0\x8b\xe2\x6c\x34\xea\x29\x63\xa7\x34\x52\x26\x6c\xf9\x07\xc1\x57\x41\x60\x7a\x42\xec\x88\x11\x04\x44\xb1\xb0\x7d\x32\x05\x99\x1d\xc7\x41\x89\xed\x53\xda\x52\xed\x9a\x67\x77\x7e\xd4\xeb\xb8\xa0\x15\xa5\xc4\xec\xcb\xaa\x36\x7d\xcc\x66\xc4\x3e\x3a\x6a\x58\x87\xb1\x6f\x1a\x7b\x41\x82\x18\x65\x82\xca\x2f\xc9\x3a\x58\xe9\xd3\xf4\x6b\x91\x5f\x1a\x44\xb1\xb0\x67\x2c\x8c\x23\x2b\x5f\xb1\x76\x8d\xed\xe3\x31\xf1\xb5\xb9\x82\xf0\x81\x61\x80\x02\xd2\x3c\xd3\xc5\x36\xf8\x71\x0c\x9b\x30\x28\x90\x82\xc5\x7a\x34\x5d\x9f\x5c\xa9\x1d\x89\x38\x99\x84\x81\x87\xd9\x93\xdc\x01\x78\xec\x13\x2f\x3f\x2d\x86\x12\xdf\x8e\x39\x68\x5e\x10\x79\x48\x34\x7c\x81\x9b\x7d\xd9\x4b\x39\x2a\xdb\x64\x57\xd9\x26\x73\x2e\x08\xe7\xce\x6f\xb0\x06\x8e\x1e\x2a\xf9\x97\x50\x30\xd4\x85\x0a\xc2\x6d\xc1\xdc\x7f\x14\x0c\x9f\x49\x1c\x60\xf2\x02\x81\x9e\xbd\x0d\xf6\x06\x68\xb6\xab\x8c\xcb\x90\x91\x66\x94\xa1\x30\x6f\x50\xc6\x16\x48\xad\x0a\xf4\xe7\x1d\x94\x51\xb8\xec\xb8\xe9\xa9\xe9\xb8\xb1\xbf\x7a\x92\xc9\x1f\xab\x87\x39\xdd\x87\xe8\xa5\x3e\xb9\x4b\x07\xd6\x40\xc1\x05\xa3\x11\xc9\x4f\xe8\x92\xe7\x16\x73\x82\x61\xab\x17\x9c\x98\xf6\xe6\x08\x7c\x4c\xea\xae\xad\xde\x90\x30\x1a\x7a\x89\xc7\xda\xb2\xba\xe0\xdc\xd1\x47\xec\xc7\x64\x33\x20\xd0\x4f\xe6\x95\x5e\x0c\xff\xe5\x63\x19\x83\x18\x0e\x66\x04\xfd\xbf\x8f\xd1\x9b\x6e\x36\xe1\x5c\x50\x2e\xb7\x5e\x51\xa0\x1d\x44\x29\x75\x50\x39\xcb\xe8\x81\x7a\x62\x6e\xbf\x62\x64\x21\x5d\x00\x50\x75\xb4\xf0\xa3\xd1\x42\xf3\x57\x45\x0b\x1a\x91\xd2\x45\x16\xf4\xd7\x20\xb0\x7d\xb6\xa2\x90\x24\x18\xab\x8f\xef\xf2\x1d\x64\xfe\xcd\x43\xc5\x12\xd0\x52\x04\x5f\x80\x5c\x2d\x87\xf0\x4b\xb2\x68\x21\x86\x03\x95\x50\xfb\xef\x9d\x23\xb8\x64\xac\x8e\x10\xae\x49\x37\x18\xc0\x0f\xd5\xe0\xb7\x08\x9e\x69\xb1\xfd\x10\xae\xc8\x36\x13\xc3\x73\xd4\x15\x82\x78\x0e\xdc\x6e\x14\x57\x74\x9b\x09\xe3\x39\xea\xbd\xe3\x78\x0e\xda\x56\x20\x2f\x6c\xc7\xd6\x22\x79\xea\xab\xf6\x8f\x61\x37\xa1\xc0\x7e\x15\xc0\x5b\x4e\x2a\xa5\x0e\x7f\x67\x64\x4b\xe6\xb0\x96\xde\x8b\xaa\x19\x07\x84\x47\x23\xe5\x80\xab\x3c\xe7\x80\x8b\xca\x49\x07\xc4\x7f\x09\xfe\x0f\x2a\x8d\x5b\x31\x81\x90\x08\x94\x0d\x0e\xc2\x20\x8d\x71\x10\x02\x69\x95\x0a\x08\xd0\x78\x66\xc7\x9c\x44\x13\x61\x21\x0f\xd4\x99\x5c\x74\x73\xb6\x86\x13\x50\xad\xc9\xa7\x1a\xd8\x62\xc9\x86\xb3\x25\x6f\xda\x76\xb2\x74\x3e\x6d\x21\x57\x3a\xa7\xfc\x0b\x8a\x39\x86\x3d\xbe\x4f\xbe\x04\xbc\xd5\x91\x2e\xe5\xd4\x1b\x4c\x99\x0e\xd4\xe3\xb7\x8c\x29\x55\x62\xfb\x09\x93\xa4\xda\x4c\xbe\x94\x61\xae\x90\x2e\x65\xb0\xed\x66\x4b\x92\x6c\x33\xc9\x52\x86\x79\xef\x5c\x29\x83\x6c\x2b\x55\x32\xf7\x61\x5d\x99\xd2\xdd\x9d\xfb\x13\x8a\xc2\x2f\x04\x45\x31\xa3\xd3\xa7\x09\xe7\x6f\x0a\x6b\x3d\x16\x46\xf2\xec\x16\x9c\x10\x66\x04\x02\x98\x9b\xf8\x2a\xf4\x93\x9b\xb4\xfb\xb7\xc5\xc0\xf4\x48\xdf\xdd\x3d\x50\x31\x47\x90\x07\x90\xc7\xa2\x8c\x1f\x53\xdd\x7e\x91\x12\x9a\x8a\xc4\xd9\xfe\xb8\x80\x25\x7a\x1f\x24\xf4\x92\xb1\xc4\x78\x45\xdb\x9d\x93\x7b\x3a\x21\x26\x77\xb0\xfa\x4c\x0a\x90\x2c\xcf\xe3\x66\xd6\xf0\xdf\x27\xac\xef\x25\xd2\x51\x2d\x22\x5d\x86\x71\x20\x20\x99\x6c\x58\xa6\x42\xb8\xde\x49\xbc\xd3\x5a\xc4\xd3\x19\xf6\xb3\x13\xee\xa4\x16\xe1\x54\x15\xf0\xec\x64\x3b\xae\x45\xb6\xb7\xf7\x98\x3e\x43\xc3\xbd\xaa\xcb\x70\x2f\xea\x94\x6d\x7d\xf1\xe5\x4d\x8d\xda\xcb\x9b\xe6\xa5\x97\x37\xad\x58\x79\x2d\xa7\xc0\x50\x5c\x00\x2e\xf0\x8c\x57\x78\xb1\x67\x15\x93\x23\x41\x09\x16\xca\xaa\x63\x31\x2b\xa3\x19\xc3\x4f\x4b\x92\xe8\xcc\xd9\xa8\xbc\x80\x5e\x59\xed\x97\xe4\xf3\x83\x20\xf4\x08\x47\x42\xae\xc8\xd6\xeb\xc1\x1c\xa0\x1d\x2e\x4b\xea\xcb\x22\x93\x50\xf7\x79\x39\x8f\x71\x61\x79\x3b\x2c\xaa\xd3\xba\x91\xc7\x29\xd4\xb8\x39\x8f\xd3\x42\xc5\x5b\x03\x8f\x1b\x6a\x61\xad\x41\x5d\x0a\xef\xa2\xeb\x92\x1a\x79\x45\xdd\x2f\x0a\xea\x2e\x42\x7c\xcd\xe2\x7a\x12\xc5\x6d\x57\xd7\x67\xc3\xdb\x16\xca\x6b\xa0\xb2\x57\x5d\x2d\xb9\xaa\xa3\xb0\x06\x3c\x0d\x56\xd4\x87\xea\xee\x5b\x49\x9d\x69\xb1\xfd\x9a\x5a\x91\x6d\xa6\xa8\xce\x51\x57\xa8\xaa\x73\xe0\x76\xcb\x6a\x45\xb7\x99\xba\x3a\x47\xbd\x77\x61\x9d\x83\xb6\x55\x59\x17\xb6\x63\x6b\x37\x21\xce\x40\xc4\x8a\x9d\x7d\xb6\xa5\x21\x5c\x0e\x78\xfd\xc4\x2b\xc1\xfd\x13\x53\x51\x09\x70\xe0\xf9\xd5\x6f\x42\x40\x60\x34\x12\x61\xb8\xca\x33\x61\xb8\x38\x28\x15\xce\x8b\x76\x89\xd7\xb9\xca\xf2\x9a\xd4\xa2\x55\x1a\xfa\xe9\x56\x5c\xca\x65\x24\x01\x69\xb1\xbc\xb1\x5f\x18\x79\xd1\x2c\x65\x30\x79\x91\x70\x3a\xd0\x30\x5d\xb9\x65\x8a\x84\xb3\x91\x1a\x28\xdb\x34\x80\x84\x83\x93\x4d\x1c\xc8\xbd\x57\xe4\x20\x1b\xf9\xba\x77\x53\x68\xeb\x77\x53\x06\x6d\xdc\x4d\x19\x04\x02\x06\x21\x37\xe3\x7b\x65\x7d\x83\x7a\xee\xa6\xe4\xd4\x1b\xcc\xfd\x0e\xd4\xe3\xb7\xd4\x2f\x55\x62\xfb\x99\xdf\xa0\xb1\xbb\x29\x83\x03\xee\xa6\x0c\xbe\xce\xdd\x94\x41\x63\x77\x53\x06\x95\xef\xa6\x0c\xda\xbe\x9b\x32\x68\xe0\x6e\xca\xd6\x94\x2f\x73\x53\x95\xb2\xa9\xe1\x4e\x50\xc7\x66\xc8\x34\xcf\x7e\x76\xdf\x9b\x85\x11\xff\xb9\xcf\x58\xc8\x38\x1a\x04\xee\xfb\x58\xa0\x88\xb0\xe4\xf0\x02\xa1\x8b\x90\xc3\xc4\x7b\x14\xf1\x7a\x08\x0e\xf1\xe4\x0b\x11\xe5\xb4\xb2\xb9\xfa\xc8\xbd\xa3\x6b\x68\x01\x8d\x0e\xed\x8d\x3b\x2e\xed\x6d\xa3\xb5\x3e\x2d\x0d\x08\x04\x35\x23\x31\xa5\x46\x87\x56\xcd\xd5\xd7\xa4\xa5\x53\xa7\x96\xde\x6a\x8a\x6c\x30\xdc\x11\xd5\x5a\x15\xf7\xfe\x14\x8c\x79\xf4\x4b\x01\x5a\xf5\x1b\x53\xdd\xab\xf6\x2c\xf2\xd4\x0e\x23\x7a\x87\x2d\x42\x2f\xf6\x43\x74\xf2\xab\x55\x6c\xcd\x19\x4b\xc1\x5a\xe6\x32\xcd\xad\xda\xa6\x83\x20\x63\xd9\x5d\x0b\x2d\x0d\x5d\x0e\x0e\x33\x19\xfc\xcf\x25\xf0\x24\x3d\x04\xab\xf0\xfa\x7c\x6c\xa1\x9f\xc0\x97\x32\xa0\x11\x98\x1c\x24\x1f\x25\x3a\x54\xfb\x4b\xda\xe0\x07\x70\x53\x8a\x7b\xe2\x0b\x9c\x68\x00\x59\x2f\xad\x1f\x4b\x66\x24\xd5\xd5\xa9\x94\xef\xb5\x53\x29\xd8\x68\x24\x2d\x97\xb9\xbc\x82\x74\xe7\xa9\x55\xcc\xf3\x93\xe8\xd5\xe0\x6c\x8d\x6e\xce\x33\xab\x6c\x02\x5f\x6f\x9b\xcc\x35\xad\x83\xdf\x62\x9b\x7e\x6e\x95\x8d\x08\x4a\x6c\xd3\xd0\xf1\x28\xdb\xf9\x51\xe6\x15\x57\xf7\x4e\xe2\x15\xb7\xec\xbe\x14\x43\xe9\xf6\x4b\x50\x6c\xd9\x7f\x2b\x1e\x7a\x9d\xc6\xb6\x71\x34\x34\x78\xd9\x8c\xa2\x4c\xeb\x2d\xa8\xfb\xdd\xef\x37\xfd\xeb\x52\x65\xbf\x7b\x82\x02\x63\x8b\xaa\x35\x74\xa9\xa2\x15\xf8\x6e\x6a\x7e\x37\xb8\xb9\xde\xa0\x63\x19\xb8\xd6\xf2\xa1\x60\x37\x68\x57\x02\xef\xae\xda\x86\x6b\xdc\x88\xb7\x5d\xe3\x0e\x79\x0b\x35\xee\x90\x85\x50\x61\xf2\x3d\x4b\x5c\x60\xad\x8e\x12\x37\x23\xde\x60\x85\x7b\xa0\x16\xbf\x55\xb8\xa9\x12\xdb\xaf\x70\x25\xd5\x66\x2a\xdc\x0c\x73\x85\x0a\x37\x83\x6d\xb7\xc2\x95\x64\x9b\xa9\x70\x33\xcc\x7b\x57\xb8\x19\x64\x5b\x15\xae\xb9\x0f\xff\x97\x9f\x17\xdc\xef\x91\x9f\x21\xaf\xeb\xd1\xc1\xe1\xe0\xfc\x79\x3d\xcd\x24\x45\xab\xe7\x11\xc2\xdb\xe6\x45\xdb\x51\x9e\x7a\x1e\x3d\xbb\xbd\xee\x7f\x78\x7e\xb6\xaa\xe7\xc9\xb3\xe1\x33\x94\xac\x9e\x87\x21\xaf\x06\xcf\x4f\xb2\x7a\x9e\x61\xfd\x38\xf8\x70\xf3\xfc\x64\xfb\x4b\x2d\xb2\x7d\xe8\x5f\xb7\x23\xda\x84\xc8\x6e\xe9\x8e\xb2\xfd\xb5\x9e\x67\x8f\x07\x97\xfd\x67\xe2\x18\x5f\xd7\x22\xd0\xd9\xfb\xcb\xcb\xb7\x57\x15\x9d\xfd\x72\xeb\x33\x82\x0a\x84\x1b\xad\xcf\x88\xe7\xad\x4f\x35\x77\x50\xeb\x33\x6f\x55\x46\xa0\x81\xc1\x79\xe5\xdf\xe7\x01\xf8\xed\xee\xe0\x39\x0c\x27\xec\x10\x9a\x43\x46\x43\x46\xc5\xd3\x21\x38\xae\xe8\xa4\xca\xcf\x0a\x33\xf8\x6b\xfa\x9f\x83\xe0\x3f\x10\x0e\x49\x62\x20\xf6\xc3\x91\x1e\xd4\x04\xc9\x0d\xdd\xde\xb3\xce\x25\x2e\x34\xb8\x0f\xee\x44\x74\xbe\x3f\x7f\x7f\x76\xf3\xfb\xb0\x8f\xe6\x62\xe1\xc3\xa4\xfe\x90\x15\x3e\xe4\xaf\x49\xd6\xbb\x20\x02\xa3\xc9\x1c\x33\x4e\x44\xd7\x8a\xc5\xd4\x7e\x9d\x26\xc4\xaa\xd0\xdf\xf1\x15\x51\x48\x8f\x77\x5c\x0d\x64\xe0\x9e\x0b\x11\xd9\xe4\x8f\x98\xde\x77\xad\x7f\xd9\xb7\x6f\xed\xb3\x70\x11\x41\x51\x0d\xe5\xa2\x05\xd2\x07\x12\xac\x6b\x0d\xfa\x5d\xe2\xcd\xd2\x94\x5b\x43\x4a\xfc\x5d\xeb\x9e\x92\x87\x08\x68\x18\x8b\xd5\x0b\x39\xba\x9e\xfa\x35\x8b\xad\x2e\x7e\x06\x07\x42\x05\xc5\xbe\xcd\x27\xd8\x27\xdd\x23\xe7\x25\x9c\xb4\xef\x6d\x5b\x1e\xd8\x41\x7f\x94\xa0\x95\x1e\x05\x31\xe2\xab\xa6\x03\x13\x93\x58\x20\x0a\x58\xad\xf4\x45\x5a\x53\x7c\x2f\xaf\x1d\xf8\x23\xc1\xa5\x1a\xe9\x74\x64\xdb\x2b\xe0\x1a\x8a\xc3\x0e\x03\x4b\xbe\x3a\x7e\x7c\x75\x9c\xe1\x00\x7d\xbd\x57\xba\xf8\x48\x18\xa7\x61\x30\x1a\xa5\x68\x79\xfa\xc5\x7e\x75\xec\x44\xc1\xcc\x42\xe2\x29\x02\x09\xe9\x02\xcf\x88\x2b\x07\x56\xe8\xe0\x28\xf2\x89\x2d\xc2\x78\x32\xb7\x0b\x34\x8f\x8e\x5f\x3e\xc2\xff\xbd\xa8\xc2\x7a\x67\x4f\x2a\x27\x27\x8f\xf0\x7f\x3f\x2a\x27\x27\xfb\x52\x39\x3d\x7e\x84\xff\xfb\x51\x39\x3d\xde\x97\xca\x6b\xd0\xd8\xeb\x3d\x35\xf6\x7a\x8d\xc6\xb8\x78\xf2\x09\x9f\x13\x59\xca\x69\x23\xca\xc3\xef\x42\x05\xb8\x09\x3f\x4c\xbb\x2a\xd0\x39\x72\xa1\x3e\xb6\xe9\x51\xec\x8c\x43\xef\x69\xb5\x12\x15\x21\xd4\xfa\x98\x95\x96\xa2\xc9\x9c\xad\x8e\x9c\xf9\x1a\x9b\xf9\xb1\xd1\xc0\x5b\x60\x36\xa3\x41\xd2\x63\xb4\x5f\x2e\x05\xa0\x38\xf2\xb0\x20\x3c\x79\xea\x5c\x77\x2c\xbb\x2b\x2f\x9b\x03\x27\x00\x67\x3f\xf2\x61\xe9\xea\x9b\xe8\x90\x93\xf9\xac\x2c\x34\x5b\xf2\xd4\xf3\x37\xae\xfb\xf0\xf0\xe0\xc0\x42\x06\xff\x9d\x49\xb8\x70\xb5\x9b\x70\x41\x89\x04\x73\xc2\x5d\x89\x92\x8b\xbf\x4d\x16\x51\x77\x55\x61\x56\x2f\xf5\x2a\x18\x3c\xdd\xfc\x38\x2f\xfe\xf3\x60\xac\x41\x6e\xa3\x19\xc3\x1e\xc9\x22\x7e\x99\x9a\x74\x13\xb1\x6e\x0e\xb3\xb1\x8c\x05\xcd\xad\xe1\x87\x0d\x9e\xca\x1b\x7d\x29\x87\x49\xfc\x31\x53\x9d\x6d\xa6\x94\xa1\x47\xb9\x68\x2a\x7b\x16\x63\x70\xc4\x71\x84\xca\x2c\xbc\xd4\x58\x2d\x37\x78\xf2\xc2\xc2\x32\x73\x27\x53\x86\xb1\xe1\x43\x51\x37\x2d\xb3\xd2\xa5\xc9\x2e\xcc\xaf\x86\xe8\x1b\xf7\x9f\x8f\x55\x68\x5c\xe1\x05\xc6\x91\x66\x64\x7f\x9c\x0b\xfd\x16\xa7\x15\x9c\x72\xbc\x2a\x4e\x6f\x5a\xce\x27\x8c\x57\xe6\x53\xfe\x14\xa2\x8c\x4f\x39\x5e\x15\x27\x5d\xc3\x27\x3d\x80\xcf\x88\x97\xe3\x84\x71\x03\xa7\x3a\xab\x01\x41\x3f\xf8\x24\x40\x4e\xff\x51\x06\x74\x1a\xcc\x7e\xcc\xba\x53\x3b\xde\x1e\x59\x5e\xba\xd4\xd2\x4f\x52\xb1\x70\x3a\x85\x6c\xa6\xf8\x6a\xaf\xf9\x69\x2f\x23\x0b\x3b\xf6\xb4\xfc\x24\x2e\x35\xfe\xca\x38\xd3\xcd\x3f\xa4\x22\x40\xd7\x9a\x42\x4e\x62\x3f\x10\x79\x70\xdf\x40\x0e\x32\x27\x90\xf5\xfe\x52\x9e\xe4\x27\x69\xe2\x71\x76\x6c\x57\x3a\xb1\x1d\x38\x98\xbd\xbb\x30\x16\x51\x2c\x38\xe4\x7c\xd6\xbf\x03\xf9\x9e\x4f\xda\x93\x93\xff\x87\xd2\x19\x47\xbb\xa8\x11\x0a\x42\x01\x49\x91\xfa\x01\x2c\x7c\x67\xea\xfe\x42\xe0\xa0\xb3\x64\xa8\x33\x06\xbd\x17\x15\x2e\x13\x35\x85\x24\x35\xc8\xd1\x8a\x49\x46\x23\x9e\x95\x3e\xe3\xde\x1b\xf9\x80\x48\xc7\x95\x8c\xe5\xe7\xbd\x90\x9f\x26\xf5\x0f\x08\x19\xaa\x0a\xc8\xa0\xb5\x5e\x8b\x07\x69\x48\xc9\xa5\x08\x3a\xbf\x81\x2d\x74\xa5\x92\x8f\xa5\xdd\xf5\x0d\x3c\x9b\x6e\x79\x9b\xcb\x2a\xa4\xde\x7c\x02\xfb\x43\x98\x21\xff\x33\xbe\xc7\x7a\xd4\xea\xdd\x63\x86\x64\xae\x8c\xba\x69\xc3\x7c\x34\xfa\x05\x48\xab\xe9\xde\x0e\x18\x96\x13\x71\xc4\xd9\xa4\x3c\x95\xf8\xcc\x5d\x1d\xff\x6e\xde\xfe\xfa\x6b\xff\x7c\x4c\x61\x70\x41\x03\x77\x1c\x07\x9e\x4f\x1c\xf8\xea\x7c\xe6\xe9\x6d\x2a\xc0\x92\x4e\x7c\xe6\xf9\x43\x0e\x06\x63\xa0\x3f\x95\x7e\xc0\xc9\x90\x35\xc2\x7f\x03\x00\x00\xff\xff\x6b\x74\xf8\x2b\xca\x56\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 22218, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

